#!/usr/bin/env python3

"""
===============================================================================
Program Description
	This program takes joystick input from the main controller, processes
it, and sends appropriate intructions to the biopayload nodes.

Author:         Lucas Buening, lucas.r.buening@gmail.com
Maintainer:     Lucas Buening, lucas.r.buening@gmail.com
Version:        January 16, 2021
Status:         In progress
===============================================================================
"""

import rospy
from std_msgs.msg import Int8
import time
import atexit
import RPi.GPIO as GPIO

# import Raspi_MotorHAT, Raspi_DCMotor, Raspi_Stepper
from Raspi_MotorHAT_python3.Raspi_MotorHAT import Raspi_MotorHAT, Raspi_DCMotor, Raspi_StepperMotor


# Setup for the Cytron Motor Hat using GPIO
GPIO.setmode(GPIO.BCM)			# GPIO numbering
GPIO.setwarnings(False)			# enable warning from GPIO
AN2 = 13				# set pwm2 pin on MD10-Hat
AN1 = 12				# set pwm1 pin on MD10-hat
DIG2 = 24				# set dir2 pin on MD10-Hat
DIG1 = 26				# set dir1 pin on MD10-Hat
GPIO.setup(AN2, GPIO.OUT)		# set pin as output
GPIO.setup(AN1, GPIO.OUT)		# set pin as output
GPIO.setup(DIG2, GPIO.OUT)		# set pin as output
GPIO.setup(DIG1, GPIO.OUT)		# set pin as output
time.sleep(1)				# delay for 1 seconds
p1 = GPIO.PWM(AN1, 100)			# set pwm for M1
p2 = GPIO.PWM(AN2, 100)			# set pwm for M2

# Create an object for the Raspi_MotroHAT with the IC2 address 0x6F
mh = Raspi_MotorHAT(0x6F)


def turnOffMotors():
    """
    Auto-disables all motors on shutdown
    """
    # Raspi Motor Hat
    mh.getMotor(1).run(Raspi_MotorHAT.RELEASE)
    mh.getMotor(2).run(Raspi_MotorHAT.RELEASE)
    mh.getMotor(3).run(Raspi_MotorHAT.RELEASE)
    mh.getMotor(4).run(Raspi_MotorHAT.RELEASE)

    # Cytron Motor Hat
    p1.start(0)
    p2.start(0)


atexit.register(turnOffMotors)


class Biopayload():
    """
    Class for controlling the biopayload components
    """

    def __init__(self):
        # Get the motor objects from the Raspi motor hat
        # carousel stepper, 200 steps/rev (1.8 degs/step), motor port 1
        self.carousel = mh.getStepper(200, 1)
        # auger vertical movement motor, motor port 3
        self.auger_vert = mh.getMotor(3)

        # Rename Cytron Port M1 as auger spin
        self.auger_spin = p1

        # Create variables for controlling the stepper motor
        self.carousel.setSpeed(30)
        self.numVials = 12
        self.stepSize = int(200 / self.numVials)
        self.stepCount = 0

        # Setup ROS node and topics
        rospy.init_node('biopayload_listener', anonymous=False)
        rospy.Subscriber('/carousel_step', Int8, self.carouselStep)
        rospy.Subscriber('/auger_vert', Int8, self.augerVert)
        rospy.Subscriber('/auger_spin', Int8, self.augerSpin)
        rospy.spin()

    def carouselStep(self, steps):
      """
      Function for moving the stepper motor
      """
      motorSteps = abs(steps.data) * self.stepSize
      self.stepCount += steps.data

      if abs(self.stepCount) >= self.numVials:
        motorSteps += (200 % self.numVials)
        if self.stepCount > 0:
          self.stepCount -= self.numVials
        else:
          self.stepCount += self.numVials

      if steps.data > 0:
        self.carousel.step(motorSteps, Raspi_MotorHAT.FORWARD, Raspi_MotorHAT.DOUBLE)
      elif steps.data < 0:
        self.carousel.step(motorSteps, Raspi_MotorHAT.BACKWARD, Raspi_MotorHAT.DOUBLE)
        
    def augerVert(self, speed):
      """
      Function for setting the speed of the auger's linear actuator
      """
      if speed.data > 0:
        self.auger_vert.run(Raspi_MotorHAT.FORWARD)
      elif speed.data < 0:
        self.auger_vert.run(Raspi_MotorHAT.BACKWARD)
        self.auger_vert.setSpeed(abs(speed.data))

    def augerSpin(self, speed):
      """
      Function for setting the speed of the auger's DC motor
      """
      if speed.data > 0:
        # set DIG1 as LOW, to control direction
        GPIO.output(DIG1, GPIO.LOW)
      elif speed.data < 0:
        # set DIG1 as HIGH, to control direction
        GPIO.output(DIG1, GPIO.HIGH)

      self.auger_spin.start(abs(speed))


if __name__ == '__main__':
    biopayload = Biopayload()
